#!/usr/bin/env python3
"""
AI Rails CLI - Initialize AI Rails TDD in any project
"""

import os
import sys
import json
import shutil
import argparse
from pathlib import Path
from datetime import datetime


class AIRailsCLI:
    def __init__(self):
        self.ai_rails_dir = ".ai-rails"
        self.structure = {
            "planning": ["current.md"],
            "tests": ["generated.py", "approved.py"],
            "implementation": ["generated.py", "approved.py"],
            "results": ["test-run.json", "coverage.json"],
            "logs": [],  # For logging output
            "prompts": [],  # For project-specific prompts
            "history": [],
        }

    def init_project(self, project_path="."):
        """Initialize AI Rails in a project directory"""
        project_path = Path(project_path).resolve()
        ai_rails_path = project_path / self.ai_rails_dir

        print(f"🚀 Initializing AI Rails TDD in: {project_path}")

        # Check if already initialized
        if ai_rails_path.exists():
            print("⚠️  AI Rails already initialized in this project")
            response = input("Reinitialize? This will preserve history. (y/N): ")
            if response.lower() != "y":
                return

        # Create directory structure
        for folder, files in self.structure.items():
            folder_path = ai_rails_path / folder
            folder_path.mkdir(parents=True, exist_ok=True)

            # Create placeholder files
            for file in files:
                file_path = folder_path / file
                if not file_path.exists():
                    if file.endswith(".py"):
                        file_path.write_text(
                            "# Placeholder - will be generated by AI Rails\n"
                        )
                    elif file.endswith(".json"):
                        file_path.write_text("{}\n")
                    elif file.endswith(".md"):
                        file_path.write_text(
                            "# Planning Document\n\nWaiting for input...\n"
                        )

        # Update .gitignore
        self._update_gitignore(project_path)

        # Create config file
        self._create_config(ai_rails_path)

        # Create planning template
        self._create_planning_template(project_path)

        print("✅ AI Rails initialized successfully!")
        print("\n📋 Next steps:")
        print("1. Edit planning-doc-template.md with your feature details")
        print("2. Start AI Rails services: ai-rails start")
        print("3. Open n8n and import the AI Rails workflow")
        print("4. Paste your planning document and run the workflow")

    def _update_gitignore(self, project_path):
        """Add .ai-rails to .gitignore"""
        gitignore_path = project_path / ".gitignore"

        # Read existing .gitignore
        if gitignore_path.exists():
            content = gitignore_path.read_text()
            if self.ai_rails_dir in content:
                return  # Already in gitignore
        else:
            content = ""

        # Add .ai-rails
        with open(gitignore_path, "a") as f:
            if content and not content.endswith("\n"):
                f.write("\n")
            f.write(f"\n# AI Rails TDD System (local development only)\n")
            f.write(f"{self.ai_rails_dir}/\n")
            f.write(f"planning-doc-*.md\n")

        print("✅ Updated .gitignore")

    def _create_config(self, ai_rails_path):
        """Create AI Rails configuration"""
        config = {
            "version": "1.0.0",
            "project_type": "auto",  # auto-detect python/javascript
            "services": {
                "n8n": os.environ.get("N8N_BASE_URL", "http://localhost:5678"),
                "ollama": os.environ.get("OLLAMA_BASE_URL", "http://localhost:11434"),
                "approval_server": os.environ.get(
                    "APPROVAL_SERVER_URL", "http://localhost:8000"
                ),
                "test_runner": os.environ.get(
                    "TEST_RUNNER_URL", "http://localhost:8001"
                ),
            },
            "workflow": {"test_timeout": 30, "max_iterations": 3, "auto_archive": True},
            "initialized": datetime.now().isoformat(),
        }

        config_path = ai_rails_path / "config.json"
        with open(config_path, "w") as f:
            json.dump(config, f, indent=2)

    def _create_planning_template(self, project_path):
        """Create a planning document template"""
        template_path = project_path / "planning-doc-template.md"

        if template_path.exists():
            return

        template = """# AI Rails Planning Document

## Feature Overview

**Feature Name**: [Your feature name]

**Feature Description**: 
[2-3 sentences describing what this feature does]

**Complexity**: simple

## Requirements

### Functional Requirements
1. [What the feature must do]
2. [Another requirement]

### Technical Requirements
- **Language**: Python
- **Dependencies**: [any specific libraries needed]

## Test Categories Required

Check the categories that apply:
- [x] Happy Path
- [x] Edge Cases  
- [x] Error Handling
- [ ] Property-Based
- [ ] Integration

## Acceptance Criteria

1. GIVEN [context] WHEN [action] THEN [expected result]
2. GIVEN [context] WHEN [action] THEN [expected result]

## Example Usage

```python
# Show how the feature should work
result = your_function("input")
assert result == "expected"
```

---
Save as: planning-doc-[feature-name].md when ready
"""

        template_path.write_text(template)
        print("✅ Created planning-doc-template.md")

    def start_services(self):
        """Start AI Rails services"""
        # Check if in an AI Rails project
        if not Path(".ai-rails").exists():
            print("❌ Not in an AI Rails project. Run 'ai-rails init' first.")
            return

        print("🚀 Starting AI Rails services...")
        print("This will start the approval server and test runner.")
        print("Use ai-rails-start command to start from the main AI Rails directory.")
        print("")

        # Get AI Rails home from environment or try to find it
        ai_rails_home = os.environ.get("AI_RAILS_HOME")
        if not ai_rails_home:
            # Try to find it relative to this script
            ai_rails_home = Path(__file__).parent
            if not (ai_rails_home / "scripts" / "start-services.sh").exists():
                print("❌ Cannot find AI Rails home directory.")
                print("Please use 'ai-rails-start' command instead.")
                return

        # Start services using the script
        start_script = Path(ai_rails_home) / "scripts" / "start-services.sh"
        if start_script.exists():
            os.system(f"cd {ai_rails_home} && bash {start_script}")
        else:
            print("❌ Could not find start-services.sh")
            print(f"Expected at: {start_script}")

    def status(self):
        """Check AI Rails status in current project"""
        if not Path(".ai-rails").exists():
            print("❌ AI Rails not initialized in this project")
            return

        print("📊 AI Rails Status")
        print("=" * 40)

        # Check for current work
        current_planning = Path(".ai-rails/planning/current.md")
        if current_planning.exists() and current_planning.stat().st_size > 50:
            print("📝 Current planning document: ✅ Found")
        else:
            print("📝 Current planning document: ⚠️  Empty")

        # Check generated files
        for stage in ["tests", "implementation"]:
            generated = Path(f".ai-rails/{stage}/generated.py")
            approved = Path(f".ai-rails/{stage}/approved.py")

            if generated.stat().st_size > 50:
                print(f"🤖 Generated {stage}: ✅ Found")
            else:
                print(f"🤖 Generated {stage}: ⚠️  Empty")

            if approved.stat().st_size > 50:
                print(f"✅ Approved {stage}: ✅ Found")
            else:
                print(f"✅ Approved {stage}: ⚠️  Empty")

        # Check test results
        test_results = Path(".ai-rails/results/test-run.json")
        if test_results.exists() and test_results.stat().st_size > 2:
            print("🧪 Test results: ✅ Found")
        else:
            print("🧪 Test results: ⚠️  Not run")

        # Check history
        history_dir = Path(".ai-rails/history")
        history_count = len(list(history_dir.glob("*")))
        print(f"📚 Historical features: {history_count}")

    def archive_current(self, feature_name=None):
        """Archive current feature to history"""
        if not Path(".ai-rails").exists():
            print("❌ AI Rails not initialized in this project")
            return

        if not feature_name:
            feature_name = input("Feature name for archive: ")

        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        archive_name = f"{timestamp}-{feature_name.replace(' ', '-')}"
        archive_path = Path(f".ai-rails/history/{archive_name}")

        # Create archive directory
        archive_path.mkdir(parents=True, exist_ok=True)

        # Copy current files
        for folder in ["planning", "tests", "implementation", "results"]:
            src_dir = Path(f".ai-rails/{folder}")
            dst_dir = archive_path / folder
            if src_dir.exists():
                shutil.copytree(src_dir, dst_dir)

        # Clear current files
        for folder in ["planning", "tests", "implementation", "results"]:
            for file in Path(f".ai-rails/{folder}").glob("*"):
                if file.is_file():
                    if file.suffix == ".py":
                        file.write_text(
                            "# Placeholder - will be generated by AI Rails\n"
                        )
                    elif file.suffix == ".json":
                        file.write_text("{}\n")
                    elif file.suffix == ".md":
                        file.write_text("# Planning Document\n\nWaiting for input...\n")

        print(f"✅ Archived to: {archive_path}")
        print("🧹 Cleared current workspace for next feature")


def main():
    parser = argparse.ArgumentParser(
        description="AI Rails TDD CLI - Initialize and manage AI Rails in any project"
    )

    subparsers = parser.add_subparsers(dest="command", help="Commands")

    # Init command
    init_parser = subparsers.add_parser(
        "init", help="Initialize AI Rails in current project"
    )
    init_parser.add_argument(
        "path", nargs="?", default=".", help="Project path (default: current directory)"
    )

    # Start command
    start_parser = subparsers.add_parser("start", help="Start AI Rails services")

    # Status command
    status_parser = subparsers.add_parser("status", help="Check AI Rails status")

    # Archive command
    archive_parser = subparsers.add_parser("archive", help="Archive current feature")
    archive_parser.add_argument("--name", help="Feature name for archive")

    args = parser.parse_args()

    cli = AIRailsCLI()

    if args.command == "init":
        cli.init_project(args.path)
    elif args.command == "start":
        cli.start_services()
    elif args.command == "status":
        cli.status()
    elif args.command == "archive":
        cli.archive_current(args.name)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
