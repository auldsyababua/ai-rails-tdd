{
  "name": "AI Rails TDD - Portable (OpenAI)",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Start TDD Process",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "content": "## 🚀 AI Rails Portable TDD (OpenAI)\n\n1. Configure settings below\n2. Paste planning document\n3. Execute workflow\n\nThis version uses OpenAI API\nFor local models, use the other workflow",
        "height": 180,
        "width": 300
      },
      "id": "instructions",
      "name": "Instructions",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [180, 80]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "planning_doc",
              "name": "planning_doc",
              "value": "Paste your planning document content here",
              "type": "string"
            },
            {
              "id": "project_path",
              "name": "project_path",
              "value": "REPLACE_WITH_YOUR_PROJECT_PATH",
              "type": "string"
            },
            {
              "id": "openai_api_key",
              "name": "openai_api_key",
              "value": "sk-YOUR-OPENAI-API-KEY",
              "type": "string"
            },
            {
              "id": "openai_model",
              "name": "openai_model",
              "value": "gpt-4-turbo-preview",
              "type": "string"
            }
          ]
        }
      },
      "id": "config",
      "name": "Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse planning document\nconst planningDoc = $json.planning_doc;\nconst projectPath = $json.project_path;\n\n// Extract feature info\nconst extractValue = (doc, fieldName) => {\n  try {\n    const escapedField = fieldName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    const regex = new RegExp(`\\\\*\\\\*${escapedField}\\\\*\\\\*:?\\\\s*(.+)`, 'i');\n    const match = doc.match(regex);\n    return match ? match[1].trim() : '';\n  } catch (e) {\n    return '';\n  }\n};\n\nconst featureName = extractValue(planningDoc, 'Feature Name') || 'unnamed-feature';\nconst featureDescription = extractValue(planningDoc, 'Feature Description') || '';\n\nreturn {\n  feature_name: featureName,\n  feature_description: featureDescription,\n  planning_doc: planningDoc,\n  project_path: projectPath,\n  openai_api_key: $json.openai_api_key,\n  openai_model: $json.openai_model\n};"
      },
      "id": "parse-planning",
      "name": "Parse Planning Doc",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.openai_api_key }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"model\": \"{{ $json.openai_model }}\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an expert test engineer specializing in Test-Driven Development (TDD). Generate comprehensive Python tests using pytest. Follow TDD principles:\\n1. Test behavior, not implementation\\n2. Include edge cases and error handling\\n3. Use descriptive test names: test_{what}_when_{condition}_then_{result}\\n4. Add docstrings to explain each test\\n5. Include all necessary imports\\n\\nOutput ONLY the test code, no explanations.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Planning Document:\\n{{ $json.planning_doc }}\\n\\nGenerate comprehensive tests for this feature.\"\n    }\n  ],\n  \"temperature\": 0.7,\n  \"max_tokens\": 4000\n}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "generate-tests",
      "name": "Generate Tests (OpenAI)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract the test code from OpenAI response\nconst response = $json;\nconst testCode = response.choices[0].message.content;\n\n// Pass along all the data\nreturn {\n  test_code: testCode,\n  project_path: $('Parse Planning Doc').item.json.project_path,\n  feature_name: $('Parse Planning Doc').item.json.feature_name,\n  feature_description: $('Parse Planning Doc').item.json.feature_description,\n  planning_doc: $('Parse Planning Doc').item.json.planning_doc,\n  openai_api_key: $('Parse Planning Doc').item.json.openai_api_key,\n  openai_model: $('Parse Planning Doc').item.json.openai_model\n};"
      },
      "id": "extract-tests",
      "name": "Extract Test Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/webhook/approval-request",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"workflow_id\": \"{{ $workflow.id }}\",\n  \"feature_description\": \"{{ $json.feature_name }}: {{ $json.feature_description }}\",\n  \"generated_tests\": \"{{ $json.test_code }}\",\n  \"test_categories\": [\"comprehensive\"],\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {}
      },
      "id": "request-approval",
      "name": "Request Test Approval",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "maxTimeout": 1800
      },
      "id": "wait-approval",
      "name": "Wait for Approval",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "url": "={{ 'http://localhost:8000/webhook/check-approval/' + $('Request Test Approval').item.json.approval_id }}",
        "options": {}
      },
      "id": "check-approval",
      "name": "Check Approval Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.response.approved }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "id": "if-approved",
      "name": "If Approved",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Extract Test Code').item.json.openai_api_key }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"model\": \"{{ $('Extract Test Code').item.json.openai_model }}\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an expert Python developer implementing code using Test-Driven Development. Write clean, efficient code that passes all provided tests. Requirements:\\n1. Make ALL tests pass\\n2. Use type hints\\n3. Include docstrings\\n4. Handle all edge cases\\n5. Follow PEP 8\\n6. No test-specific hacks\\n\\nOutput ONLY the implementation code.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Tests to pass:\\n{{ $('Check Approval Status').item.json.response.tests || $('Extract Test Code').item.json.test_code }}\\n\\nPlanning Document:\\n{{ $('Extract Test Code').item.json.planning_doc }}\\n\\nWrite the implementation.\"\n    }\n  ],\n  \"temperature\": 0.3,\n  \"max_tokens\": 4000\n}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "generate-code",
      "name": "Generate Code (OpenAI)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2220, 240]
    },
    {
      "parameters": {
        "jsCode": "// Extract implementation code\nconst response = $json;\nconst implementationCode = response.choices[0].message.content;\n\nreturn {\n  implementation_code: implementationCode,\n  test_code: $('Extract Test Code').item.json.test_code,\n  project_path: $('Extract Test Code').item.json.project_path,\n  feature_name: $('Extract Test Code').item.json.feature_name\n};"
      },
      "id": "extract-code",
      "name": "Extract Implementation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 240]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8001/run-tests",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"test_code\": \"{{ $json.test_code }}\",\n  \"implementation_code\": \"{{ $json.implementation_code }}\",\n  \"language\": \"python\",\n  \"test_framework\": \"pytest\",\n  \"timeout\": 30\n}",
        "options": {
          "timeout": 45000
        }
      },
      "id": "run-tests",
      "name": "Run Tests",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2660, 240]
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "id": "check-success",
      "name": "Check Test Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2880, 240]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "✅ All tests passed! Implementation ready."
            },
            {
              "name": "test_file",
              "value": "={{ 'test_' + $('Extract Implementation').item.json.feature_name.toLowerCase().replace(/ /g, '_') + '.py' }}"
            },
            {
              "name": "impl_file",
              "value": "={{ $('Extract Implementation').item.json.feature_name.toLowerCase().replace(/ /g, '_') + '.py' }}"
            },
            {
              "name": "tests",
              "value": "={{ $('Extract Implementation').item.json.test_code }}"
            },
            {
              "name": "implementation",
              "value": "={{ $('Extract Implementation').item.json.implementation_code }}"
            }
          ],
          "number": [
            {
              "name": "total_tests",
              "value": "={{ $('Run Tests').item.json.total_tests }}"
            },
            {
              "name": "passed_tests",
              "value": "={{ $('Run Tests').item.json.passed_tests }}"
            },
            {
              "name": "coverage",
              "value": "={{ $('Run Tests').item.json.coverage || 0 }}"
            }
          ]
        }
      },
      "id": "success-output",
      "name": "Success Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [3100, 180]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "failed"
            },
            {
              "name": "message",
              "value": "❌ Some tests failed. Check the output."
            },
            {
              "name": "test_output",
              "value": "={{ $('Run Tests').item.json.stdout }}"
            },
            {
              "name": "error_output",
              "value": "={{ $('Run Tests').item.json.stderr }}"
            }
          ],
          "number": [
            {
              "name": "failed_tests",
              "value": "={{ $('Run Tests').item.json.failed_tests }}"
            }
          ]
        }
      },
      "id": "failure-output",
      "name": "Failure Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [3100, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "rejected"
            },
            {
              "name": "message",
              "value": "Tests were rejected during review"
            },
            {
              "name": "feedback",
              "value": "={{ $json.response.feedback }}"
            }
          ]
        }
      },
      "id": "rejection-output",
      "name": "Rejection Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [2220, 360]
    }
  ],
  "connections": {
    "Start TDD Process": {
      "main": [[{"node": "Configuration", "type": "main", "index": 0}]]
    },
    "Configuration": {
      "main": [[{"node": "Parse Planning Doc", "type": "main", "index": 0}]]
    },
    "Parse Planning Doc": {
      "main": [[{"node": "Generate Tests (OpenAI)", "type": "main", "index": 0}]]
    },
    "Generate Tests (OpenAI)": {
      "main": [[{"node": "Extract Test Code", "type": "main", "index": 0}]]
    },
    "Extract Test Code": {
      "main": [[{"node": "Request Test Approval", "type": "main", "index": 0}]]
    },
    "Request Test Approval": {
      "main": [[{"node": "Wait for Approval", "type": "main", "index": 0}]]
    },
    "Wait for Approval": {
      "main": [[{"node": "Check Approval Status", "type": "main", "index": 0}]]
    },
    "Check Approval Status": {
      "main": [[{"node": "If Approved", "type": "main", "index": 0}]]
    },
    "If Approved": {
      "main": [
        [{"node": "Generate Code (OpenAI)", "type": "main", "index": 0}],
        [{"node": "Rejection Output", "type": "main", "index": 0}]
      ]
    },
    "Generate Code (OpenAI)": {
      "main": [[{"node": "Extract Implementation", "type": "main", "index": 0}]]
    },
    "Extract Implementation": {
      "main": [[{"node": "Run Tests", "type": "main", "index": 0}]]
    },
    "Run Tests": {
      "main": [[{"node": "Check Test Success", "type": "main", "index": 0}]]
    },
    "Check Test Success": {
      "main": [
        [{"node": "Success Output", "type": "main", "index": 0}],
        [{"node": "Failure Output", "type": "main", "index": 0}]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateId": "ai-rails-portable-openai"
  },
  "pinData": {}
}