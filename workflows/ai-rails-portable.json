{
  "name": "AI Rails TDD - Portable System",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Start TDD Process",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "content": "## 🚀 AI Rails Portable TDD\n\n1. Run `ai-rails init` in your project\n2. Write planning-doc-[feature].md\n3. Paste content below\n4. Execute workflow\n\nFiles are read/written to:\n`.ai-rails/` in your project",
        "height": 200,
        "width": 300
      },
      "id": "instructions",
      "name": "Instructions",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [180, 80]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "planning_doc",
              "name": "planning_doc",
              "value": "Paste your planning document content here",
              "type": "string"
            },
            {
              "id": "project_path",
              "name": "project_path",
              "value": "REPLACE_WITH_YOUR_PROJECT_PATH",
              "type": "string"
            }
          ]
        }
      },
      "id": "input-config",
      "name": "Project Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse planning document and save to .ai-rails\nconst planningDoc = $json.planning_doc;\nconst projectPath = $json.project_path;\n\n// Extract feature info\nconst extractValue = (doc, fieldName) => {\n  try {\n    const escapedField = fieldName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    const regex = new RegExp(`\\\\*\\\\*${escapedField}\\\\*\\\\*:?\\\\s*(.+)`, 'i');\n    const match = doc.match(regex);\n    return match ? match[1].trim() : '';\n  } catch (e) {\n    return '';\n  }\n};\n\nconst featureName = extractValue(planningDoc, 'Feature Name') || 'unnamed-feature';\nconst featureDescription = extractValue(planningDoc, 'Feature Description') || '';\n\n// Save planning doc to .ai-rails/planning/current.md\nconst fs = require('fs');\nconst path = require('path');\n\nconst aiRailsPath = path.join(projectPath, '.ai-rails');\nconst planningPath = path.join(aiRailsPath, 'planning', 'current.md');\n\n// Note: In real n8n, we'd use SSH Execute node to write files\n// For now, returning the data to be written\n\nreturn {\n  feature_name: featureName,\n  feature_description: featureDescription,\n  planning_doc: planningDoc,\n  project_path: projectPath,\n  ai_rails_path: aiRailsPath,\n  file_operations: [\n    {\n      action: 'write',\n      path: `${aiRailsPath}/planning/current.md`,\n      content: planningDoc\n    }\n  ]\n};"
      },
      "id": "save-planning",
      "name": "Save Planning Doc",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "command": "={{ `echo '${$json.planning_doc}' > ${$json.project_path}/.ai-rails/planning/current.md` }}",
        "cwd": "={{ $json.project_path }}"
      },
      "id": "write-planning-file",
      "name": "Write Planning to Disk",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configuration').first().json.ollama_url || 'http://localhost:11434' }}/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"model\": \"qwen2.5-coder:32b\",\n  \"prompt\": \"You are an expert test engineer specializing in Test-Driven Development (TDD).\\n\\nPlanning Document:\\n{{ $('Save Planning Doc').item.json.planning_doc }}\\n\\nGenerate comprehensive Python tests using pytest. Follow TDD principles:\\n1. Test behavior, not implementation\\n2. Include edge cases and error handling\\n3. Use descriptive test names: test_{what}_when_{condition}_then_{result}\\n4. Add docstrings to explain each test\\n5. Include all necessary imports\\n\\nOutput ONLY the test code, no explanations.\",\n  \"stream\": false,\n  \"options\": {\n    \"temperature\": 0.7,\n    \"num_predict\": 6000\n  }\n}",
        "options": {
          "timeout": 90000
        }
      },
      "id": "generate-tests",
      "name": "Generate Tests",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "command": "={{ `cat > ${$('Save Planning Doc').item.json.project_path}/.ai-rails/tests/generated.py << 'EOF'\\n${$json.response}\\nEOF` }}",
        "cwd": "={{ $('Save Planning Doc').item.json.project_path }}"
      },
      "id": "save-generated-tests",
      "name": "Save Generated Tests",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/webhook/approval-request",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"workflow_id\": \"{{ $workflow.id }}\",\n  \"feature_description\": \"{{ $('Save Planning Doc').item.json.feature_name }}: {{ $('Save Planning Doc').item.json.feature_description }}\",\n  \"generated_tests\": \"{{ $('Generate Tests').item.json.response }}\",\n  \"test_categories\": [\"happy_path\", \"edge_cases\", \"error_handling\"],\n  \"timestamp\": \"{{ new Date().toISOString() }}\",\n  \"stage\": \"test_generation\"\n}",
        "options": {}
      },
      "id": "request-test-approval",
      "name": "Request Test Approval",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "maxTimeout": 1800
      },
      "id": "wait-for-approval",
      "name": "Wait for Approval",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "url": "={{ 'http://localhost:8000/webhook/check-approval/' + $('Request Test Approval').item.json.approval_id }}",
        "options": {}
      },
      "id": "check-approval",
      "name": "Check Approval Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.response.approved }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "id": "if-approved",
      "name": "If Approved",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "command": "={{ `cp ${$('Save Planning Doc').item.json.project_path}/.ai-rails/tests/generated.py ${$('Save Planning Doc').item.json.project_path}/.ai-rails/tests/approved.py` }}",
        "cwd": "={{ $('Save Planning Doc').item.json.project_path }}"
      },
      "id": "copy-approved-tests",
      "name": "Copy to Approved Tests",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [2440, 240]
    },
    {
      "parameters": {
        "command": "={{ `cat ${$('Save Planning Doc').item.json.project_path}/.ai-rails/tests/approved.py` }}",
        "cwd": "={{ $('Save Planning Doc').item.json.project_path }}"
      },
      "id": "read-approved-tests",
      "name": "Read Approved Tests",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [2660, 240]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configuration').first().json.ollama_url || 'http://localhost:11434' }}/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"model\": \"qwen2.5-coder:32b\",\n  \"prompt\": \"You are an expert Python developer implementing code using Test-Driven Development.\\n\\nApproved Tests:\\n{{ $json.stdout }}\\n\\nPlanning Document:\\n{{ $('Save Planning Doc').item.json.planning_doc }}\\n\\nWrite Python code that makes ALL these tests pass. Requirements:\\n1. Implement all functions/classes tested\\n2. Handle all edge cases\\n3. Use type hints\\n4. Include docstrings\\n5. Follow PEP 8\\n6. No test-specific hacks\\n\\nOutput ONLY the implementation code.\",\n  \"stream\": false,\n  \"options\": {\n    \"temperature\": 0.3,\n    \"num_predict\": 8000\n  }\n}",
        "options": {
          "timeout": 120000
        }
      },
      "id": "generate-implementation",
      "name": "Generate Implementation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2880, 240]
    },
    {
      "parameters": {
        "command": "={{ `cat > ${$('Save Planning Doc').item.json.project_path}/.ai-rails/implementation/generated.py << 'EOF'\\n${$json.response}\\nEOF` }}",
        "cwd": "={{ $('Save Planning Doc').item.json.project_path }}"
      },
      "id": "save-implementation",
      "name": "Save Generated Implementation",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [3100, 240]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8001/run-tests",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"test_code\": \"{{ $('Read Approved Tests').item.json.stdout }}\",\n  \"implementation_code\": \"{{ $('Generate Implementation').item.json.response }}\",\n  \"language\": \"python\",\n  \"test_framework\": \"pytest\",\n  \"timeout\": 30\n}",
        "options": {
          "timeout": 45000
        }
      },
      "id": "run-tests",
      "name": "Run Tests",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [3320, 240]
    },
    {
      "parameters": {
        "command": "={{ `echo '${JSON.stringify($json)}' > ${$('Save Planning Doc').item.json.project_path}/.ai-rails/results/test-run.json` }}",
        "cwd": "={{ $('Save Planning Doc').item.json.project_path }}"
      },
      "id": "save-test-results",
      "name": "Save Test Results",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [3540, 240]
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $('Run Tests').item.json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "id": "check-test-success",
      "name": "Check Test Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [3760, 240]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "✅ All tests passed! Implementation is ready."
            },
            {
              "name": "next_steps",
              "value": "1. Review files in .ai-rails/\n2. Copy approved implementation to your project\n3. Run 'ai-rails archive --name \"{{ $('Save Planning Doc').item.json.feature_name }}\"' to archive"
            }
          ],
          "number": [
            {
              "name": "total_tests",
              "value": "={{ $('Run Tests').item.json.total_tests }}"
            },
            {
              "name": "passed_tests",
              "value": "={{ $('Run Tests').item.json.passed_tests }}"
            },
            {
              "name": "coverage",
              "value": "={{ $('Run Tests').item.json.coverage || 0 }}"
            }
          ]
        }
      },
      "id": "success-output",
      "name": "Success Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [3980, 180]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "failed"
            },
            {
              "name": "message",
              "value": "❌ Tests failed! Check .ai-rails/results/test-run.json for details"
            },
            {
              "name": "failed_tests",
              "value": "={{ $('Run Tests').item.json.failed_tests }}"
            },
            {
              "name": "test_output",
              "value": "={{ $('Run Tests').item.json.stdout }}"
            }
          ]
        }
      },
      "id": "failure-output",
      "name": "Failure Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [3980, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "rejected"
            },
            {
              "name": "message",
              "value": "❌ Tests rejected during review"
            },
            {
              "name": "feedback",
              "value": "={{ $json.response.feedback }}"
            }
          ]
        }
      },
      "id": "rejection-output",
      "name": "Rejection Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [2440, 360]
    }
  ],
  "connections": {
    "Start TDD Process": {
      "main": [[{"node": "Project Configuration", "type": "main", "index": 0}]]
    },
    "Project Configuration": {
      "main": [[{"node": "Save Planning Doc", "type": "main", "index": 0}]]
    },
    "Save Planning Doc": {
      "main": [[{"node": "Write Planning to Disk", "type": "main", "index": 0}]]
    },
    "Write Planning to Disk": {
      "main": [[{"node": "Generate Tests", "type": "main", "index": 0}]]
    },
    "Generate Tests": {
      "main": [[{"node": "Save Generated Tests", "type": "main", "index": 0}]]
    },
    "Save Generated Tests": {
      "main": [[{"node": "Request Test Approval", "type": "main", "index": 0}]]
    },
    "Request Test Approval": {
      "main": [[{"node": "Wait for Approval", "type": "main", "index": 0}]]
    },
    "Wait for Approval": {
      "main": [[{"node": "Check Approval Status", "type": "main", "index": 0}]]
    },
    "Check Approval Status": {
      "main": [[{"node": "If Approved", "type": "main", "index": 0}]]
    },
    "If Approved": {
      "main": [
        [{"node": "Copy to Approved Tests", "type": "main", "index": 0}],
        [{"node": "Rejection Output", "type": "main", "index": 0}]
      ]
    },
    "Copy to Approved Tests": {
      "main": [[{"node": "Read Approved Tests", "type": "main", "index": 0}]]
    },
    "Read Approved Tests": {
      "main": [[{"node": "Generate Implementation", "type": "main", "index": 0}]]
    },
    "Generate Implementation": {
      "main": [[{"node": "Save Generated Implementation", "type": "main", "index": 0}]]
    },
    "Save Generated Implementation": {
      "main": [[{"node": "Run Tests", "type": "main", "index": 0}]]
    },
    "Run Tests": {
      "main": [[{"node": "Save Test Results", "type": "main", "index": 0}]]
    },
    "Save Test Results": {
      "main": [[{"node": "Check Test Success", "type": "main", "index": 0}]]
    },
    "Check Test Success": {
      "main": [
        [{"node": "Success Output", "type": "main", "index": 0}],
        [{"node": "Failure Output", "type": "main", "index": 0}]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateId": "ai-rails-portable"
  },
  "pinData": {}
}